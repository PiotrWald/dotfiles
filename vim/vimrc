call plug#begin('~/.vim/plugged')
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-pathogen'
Plug 'slim-template/vim-slim'
Plug 'w0rp/ale'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'eugen0329/vim-esearch'
Plug 'tpope/vim-eunuch'
Plug 'elixir-editors/vim-elixir'
Plug 'slashmili/alchemist.vim'
Plug 'patstockwell/vim-monokai-tasty'
Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-tmux-runner'
Plug 'janko/vim-test'
Plug 'benmills/vimux'
Plug 'rafi/awesome-vim-colorschemes'
Plug 'morhetz/gruvbox'
Plug 'NLKNguyen/papercolor-theme'
Plug 'kyoz/purify', { 'rtp': 'vim' }
Plug 'vimwiki/vimwiki', { 'branch': 'dev' }
Plug 'cocopon/iceberg.vim'
Plug 'machakann/vim-highlightedyank'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'kana/vim-textobj-user'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'ryanoasis/vim-devicons'
Plug 'francoiscabrol/ranger.vim'
Plug 'rbgrouleff/bclose.vim'
Plug 'edkolev/tmuxline.vim'
Plug '907th/vim-auto-save'
call plug#end()

execute pathogen#infect()
set encoding=UTF-8

runtime macros/matchit.vim

let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g "" --ignore .git'
let g:ctrlp_use_caching = 0
let g:ctrlp_show_hidden = 1

let test#strategy = "vtr"

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Set specific linters
let g:ale_linters = {
      \   'javascript': ['eslint'],
      \   'ruby': ['rubocop'],
      \}

let g:ale_linters_explicit = 1
let g:airline#extensions#ale#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='gruvbox'
" let g:airline_theme='papercolor'
" let g:airline_theme='badcat'
let g:ale_sign_column_always = 1
let g:ale_set_highlights = 0
" let g:airline_section_z (column_number)
let g:airline_section_z = '%3l/%L:%3v'
" let g:airline_section_e = ''

" :Tmuxline vim_statusline_3

" VimWiki config
let g:vimwiki_list = [{ 'path': '~/Documents/notes/',
       \ 'syntax':'markdown', 'ext': '.md' }]
autocmd FileType vimwiki set ft=markdown

" AutoSave config
let g:auto_save = 1 

"NerdTree config
map <C-o> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1

" Ranger VIM config
let g:NERDTreeHijackNetrw = 0
let g:ranger_replace_netrw = 1
let g:ranger_command_override = 'ranger --cmd "set show_hidden=true"'

if !has('nvim')
  " Get the defaults that most users want.
  source $VIMRUNTIME/defaults.vim
endif

if &t_Co > 2 || has("gui_running")
  " Switch on highlighting the last used search pattern.
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
    au!

    " For all text files set 'textwidth' to 78 characters.
    autocmd FileType text setlocal textwidth=78
  augroup END

else

  set autoindent		" always set autoindenting on
endif " has("autocmd")

if has('syntax') && has('eval')
  packadd! matchit
endif

autocmd VimResized * :wincmd =

nmap 0 ^
let mapleader = "\<Space>"

" Mapping for test-vim
nnoremap <silent> <Leader>t :TestFile<CR>
nnoremap <silent> <Leader>s :TestNearest<CR>
nnoremap <silent> <Leader>l :TestLast<CR>
nnoremap <silent> <Leader>a :TestSuite<CR>
nnoremap <silent> <Leader>gt :TestVisit<CR>

" Other key mapping
nmap <leader>vr :sp $MYVIMRC<cr>
nmap <leader>so :source $MYVIMRC<cr>
nmap <leader>v :vnew <C-R>=escape(expand("%:p:h"), ' ') . '/'<CR>
nmap <leader>co ggVG"*
nmap <leader>sc :sp db/schema.rb<cr>

nmap <leader>pry :VtrOpenRunner {'orientation': 'h', 'percentage': 50,'cmd': 'pry'}<cr>
nmap <leader>iex :VtrOpenRunner {'orientation': 'h', 'percentage': 50,'cmd': 'iex'}<cr>
nmap <leader>sl :VtrSendLinesToRunner<cr>
nmap <leader>bp orequire 'pry'; binding.pry # FIXME <esc>
nmap <leader>e :NERDTreeFind<cr>


nmap j gj
nmap k gk

imap jk <esc>
imap kj <esc>

set nobackup
set nocompatible
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab
set noundofile
set number
set hlsearch
set incsearch
set autoindent
set nowrap
set background=light
set ruler
set autoread
set scrolloff=999
set splitbelow
set noswapfile
set splitright
" set number relativenumber

syntax on

set t_Co=256

let g:gruvbox_italic=1
let g:gruvbox_contrast_dark="hard"
let g:gruvbox_contrast_light="hard"

colorscheme gruvbox

filetype indent on
filetype on
filetype indent on
filetype plugin on
